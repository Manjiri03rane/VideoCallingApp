{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","sendToPeer","messageType","payload","socket","emit","socketID","id","createOffer","console","log","pc","offerToReceiveVideo","then","sdp","setLocalDescription","setRemoteDescription","desc","JSON","parse","textref","value","RTCSessionDescription","createAnswer","addCandidate","candidates","forEach","candidate","stringify","addIceCandidate","RTCIceCandidate","localVideoref","React","createRef","remoteVideoref","this","io","path","query","on","success","RTCPeerConnection","urls","onicecandidate","e","onaddstream","current","srcObject","stream","navigator","mediaDevices","getUserMedia","video","addStream","catch","style","zIndex","position","right","bottom","width","height","margin","backgroundColor","ref","autoPlay","minWidth","minHeight","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef22e612.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//\nimport io from 'socket.io-client'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.localVideoref = React.createRef()\n    this.remoteVideoref = React.createRef()\n\n    this.socket = null\n    this.candidates = []\n\n\n  }\n\n  componentDidMount() {\n\n    this.socket = io(\n      '/webrtcPeer',\n      {\n        path: '/webrtc',\n        query: {}\n      }\n    )\n\n    this.socket.on('connection-success', success => {\n      console.log(success)\n    })\n\n    this.socket.on('offerOrAnswer', (sdp) => {\n      this.textref.value = JSON.stringify(sdp)\n\n      // set sdp as remote description\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    })\n\n    this.socket.on('candidate', (candidate) => {\n      // console.log('From Peer... ', JSON.stringify(candidate))\n      //this.candidates = [...this.candidates, candidate]\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    })\n\n    //const pc_config = null\n\n    const pc_config = {\n      \"iceServers\": [\n        // {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls: 'stun:stun.l.google.com:19302'\n        }\n      ]\n    }\n\n\n\n    this.pc = new RTCPeerConnection(pc_config)\n\n    this.pc.onicecandidate = (e) => {\n      if (e.candidate) {\n        //console.log(JSON.stringify(e.candidate))\n        this.sendToPeer('candidate', e.candidate)\n\n      }\n    }\n\n    this.pc.onaddstream = (e) => {\n      this.remoteVideoref.current.srcObject = e.stream\n    }\n\n\n    const constraints = { video: true }\n\n    const success = (stream) => {\n      this.localVideoref.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    const failure = (e) => {\n      console.log('getUserMedia Error:', e)\n    }\n\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(success)\n      .catch(failure)\n\n  }\n\n\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    })\n  }\n\n  createOffer = () => {\n    console.log('Offer')\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        //console.log(JSON.stringify(sdp))\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToPeer('offerOrAnswer', sdp)\n      })\n  }\n\n  setRemoteDescription = () => {\n    // retrieve and parse the SDP copied from the remote peer\n    const desc = JSON.parse(this.textref.value)\n    // set sdp as remote description\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n  }\n\n  createAnswer = () => {\n    console.log('Answer')\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        //console.log(JSON.stringify(sdp))\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToPeer('offerOrAnswer', sdp)\n\n      })\n  }\n\n  addCandidate = () => {\n    // retrieve and parse the Candidate copied from the remote peer\n    // const candidate = JSON.parse(this.textref.value)\n    // console.log('Adding candidate:', candidate)\n\n    // add the candidate to the peer connection\n    //this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n\n    this.candidates.forEach(candidate => {\n      console.log(JSON.stringify(candidate))\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <video\n          style={{\n            zIndex: 2,\n            position: 'fixed',\n            right: 0,\n            bottom: 0,\n            width: 200, height: 200,\n            margin: 10, backgroundColor: 'black'\n\n          }}\n          ref={this.localVideoref}\n          autoPlay></video>\n\n        <video\n          style={{\n            zIndex: 1,\n            minWidth: '1000px',\n            minHeight: '1000px',\n            bottom: 0,\n            position: 'fixed',\n            //width: 400, height: 400,\n            backgroundColor: 'black'\n          }}\n          ref={this.remoteVideoref}\n          autoPlay></video>\n\n        <br />\n        <div style={{ zIndex: 1, position: 'fixed' }}>\n          <button onClick={this.createOffer}>Offer</button>\n          <button onClick={this.createAnswer}>Answer</button>\n          <br />\n          <textarea ref={ref => { this.textref = ref }}></textarea>\n          <br />\n        </div>\n        {/* <button onClick={this.setRemoteDescription}>Set Remote Description</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n        <br />\n\n\n\n\n\n      </div >\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}